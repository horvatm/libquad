/*
  Testing libquad.
   
 
  Author: Martin Horvat, April 2013
  
  Ref: 
 
  * for printing http://www.hicest.com/Format.htm
*/ 

#include <iostream>

using namespace std;

#include "../src/quad.h"

int main() {
  
  //===========================================================================
  //===========================================================================

  std::cout << "Testing printf 123\n";

  quad q = 123.0q;

  char s[256];
  
  int len=256;

  sprintfq_(s, &len, "(ES44.35E4)", &q);

  std::cout <<"|" << s << "|\n";

  //===========================================================================
  //===========================================================================
 
  std::cout << "\nTesting atoq: 1.234\n";
  
  quad f;

  char ss[256]="1.234",
       rr[256];
  
  atoq_(ss, &f);
  
  sprintfq_(rr, &len, "(ES44.35E4)", &f);

  std::cout <<"|" << rr << "|\n";

  //===========================================================================
  //===========================================================================
 
  std::cout << "\nTesting: floor(2.3243)\n";
  
  f = 2.3243;
  
  quad z;
   
  floorq_(&f, &z);
  
  std::cout <<"|" << z << "|\n";

  //===========================================================================
  //===========================================================================
 
  std::cout << "\nTesting: ceil(2.3243)\n";
  
  f = 2.3243;
   
  ceilq_(&f, &z);
  
  std::cout <<"|" << z << "|\n";

  //===========================================================================
  //===========================================================================


  std::cout << "\nTesting:log(2)\n";

  quad a = 2.0q;
  
  logq_(&a, &z);
  
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << "6.931471805599453094172321214581766e-01\n"; // W. mathematica result

  //===========================================================================
  //===========================================================================


  std::cout << "\nTesting:sqrt(2)\n";

  a = 2.0q;
  
  sqrtq_(&a, &z);
  
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << "1.414213562373095048801688724209698078570e-00\n"; // W. mathematica result

  
  //===========================================================================
  //===========================================================================

  
  std::cout << "\nTesting:sin(2)\n";

  a = 2.0q;
  
  sinq_(&a, &z);
  
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << "9.092974268256816953960198659117448427023e-01\n"; // W. mathematica result
  
  
  //===========================================================================
  //===========================================================================

  
  std::cout << "\nTesting:cos(2)\n";

  a = 2.0q;
  
  cosq_(&a, &z);
  
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << "-4.161468365471423869975682295007621897660e-01\n"; // W. mathematica result
  
  
  //===========================================================================
  //===========================================================================
  
  std::cout << "\nTesting:exp(2)\n";
  
  expq_(&a,&z);
   
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << "7.389056098930650227230427460575008e+00\n"; // W. mathematica result
  
  //===========================================================================
  //===========================================================================
  
  std::cout << "\nTesting:pow(2,2)\n";
  
  powq_(&a, &a, &z);
  
  std::cout 

    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << a*a << '\n' 
    << "4.000000000000000000000000000000000e+00\n"; // W. mathematica result


  //===========================================================================
  //===========================================================================
  
  std::cout << "\nTesting:powi(2,2)\n";
  int i=2;
  powiq_(&a, &i, &z);
  
  std::cout 

    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << a*a << '\n' 
    << "4.000000000000000000000000000000000e+00\n"; // W. mathematica result



  //===========================================================================
  //===========================================================================
  
  std::cout << "\nTesting:cot(2)\n";
  cotq_(&a,&z);
  std::cout 

    << "1234567890123456789012345678901234567890\n" // index 
    << z << '\n'
    << "-4.5765755436028576375027741043204728e-01\n"; // W. mathematica result N[Cot[2], 35]


  //===========================================================================
  //===========================================================================
  
  std::cout << "\nTesting:int(1 +- eps) eps = 1e-30\n";
  a = 1.0Q+1e-30Q;
  i = int(a);
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << i << '\n'
    << 1 << '\n';

  a = 1.0Q-1e-30Q;
  i = int(a);
  std::cout 
    << "1234567890123456789012345678901234567890\n" // index 
    << i << '\n'
    << 0 << '\n';


  return 0;
}
